package com.hongocman.quanlymonhoc.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hongocman.quanlymonhoc.models.BuoiHocModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUOI_HOC_MODEL".
*/
public class BuoiHocModelDao extends AbstractDao<BuoiHocModel, String> {

    public static final String TABLENAME = "BUOI_HOC_MODEL";

    /**
     * Properties of entity BuoiHocModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property Description = new Property(1, String.class, "Description", false, "DESCRIPTION");
        public final static Property StartTime = new Property(2, Integer.class, "StartTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, Integer.class, "EndTime", false, "END_TIME");
    };


    public BuoiHocModelDao(DaoConfig config) {
        super(config);
    }
    
    public BuoiHocModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUOI_HOC_MODEL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"DESCRIPTION\" TEXT," + // 1: Description
                "\"START_TIME\" INTEGER," + // 2: StartTime
                "\"END_TIME\" INTEGER);"); // 3: EndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUOI_HOC_MODEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BuoiHocModel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getID());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(2, Description);
        }
 
        Integer StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(3, StartTime);
        }
 
        Integer EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(4, EndTime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BuoiHocModel readEntity(Cursor cursor, int offset) {
        BuoiHocModel entity = new BuoiHocModel( //
            cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Description
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // StartTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // EndTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BuoiHocModel entity, int offset) {
        entity.setID(cursor.getString(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BuoiHocModel entity, long rowId) {
        return entity.getID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BuoiHocModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
